{"version":3,"sources":["components/contlist.js","components/add-contact.js","components/modifyContact.js","components/App.js","serviceWorker.js","index.js"],"names":["List","props","delete1","id","axios","delete","then","res","console","log","data","window","location","reload","modif","state","contacts","get","setState","this","map","el","className","key","_id","name","phoneNumber","contactEmail","onClick","history","push","Component","ContactAdd","addContact","post","onChange","e","target","value","to","Updatecontact","handleChange","UpdateContact","modifiedContact","phone","email","put","match","params","placeholder","type","App","path","component","ContactsPage","contactUpd","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bd63249f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n            contacts: [],\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        axios.get(\"http://localhost:4000/contacts\")\r\n            .then(res => this.setState({ contacts: res.data }))\r\n\r\n    }\r\n    delete1 = (id) => {\r\n        axios.delete(\"http://localhost:4000/delete_contact/\" + id)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                window.location.reload()\r\n            }\r\n\r\n            )\r\n    }\r\n\r\n\r\n    modif = (id) => {\r\n        axios.delete(\"http://localhost:4000/delete_contact/\" + id)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                window.location.reload()\r\n            }\r\n\r\n            )\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        console.log(this.state.contacts)\r\n        return (\r\n            <div>\r\n                {this.state.contacts.map((el) => {\r\n                    return (\r\n                        <div className=\"contact-card\" key={el._id}>\r\n                            <p><span>Name:</span><span>{el.name}</span></p>\r\n                            <p><span>Phone:</span><span>{el.phoneNumber}</span></p>\r\n                            <p><span>Email:</span><span>{el.contactEmail}</span></p>\r\n                            <p>\r\n                                <button onClick={() => { this.delete1(el._id) }}>Supprimer</button>\r\n\r\n\r\n                                <button onClick={() => this.props.history.push(`/update/${el._id}`)}>Modifier</button>\r\n\r\n\r\n\r\n\r\n\r\n                            </p>\r\n\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './style.css';\r\nimport { Link } from 'react-router-dom'\r\nclass ContactAdd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n            name: \"\",\r\n            phoneNumber: 0,\r\n            contactEmail: \"\"\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    addContact = () => {\r\n        axios.post(\"http://localhost:4000/contact\", {\r\n            \"name\": this.state.name,\r\n            \"phoneNumber\": this.state.phoneNumber,\r\n            \"contactEmail\": this.state.contactEmail\r\n        })\r\n            .then(res => {\r\n                console.log(res.data);\r\n                window.location.reload()\r\n            }\r\n\r\n            )\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (<div>\r\n\r\n\r\n            <div className=\"ContactAdd\">\r\n                <span>Add Contact Page</span>\r\n                <span className=\"contactName\">contactName</span>\r\n                <input onChange={(e => this.setState({ name: e.target.value }))} className=\"searchByName\"></input>\r\n                <span className=\"contactNumber\">Contact Number</span>\r\n                <input onChange={(e => this.setState({ phoneNumber: e.target.value }))} className=\"searchByName\"></input>\r\n                <span className=\"ContactEmail\">Contact Email</span>\r\n                <input onChange={(e => this.setState({ contactEmail: e.target.value }))} className=\"searchByName\"></input>\r\n                <Link to={`/contacts/`}> <button className=\"addContact\" onClick={this.addContact}>Add Contact</button></Link>\r\n\r\n            </div>\r\n        </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ContactAdd;","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default class Updatecontact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            phone: '',\r\n            email: ''\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    componentDidMount() {\r\n\r\n\r\n        axios.get('http://localhost:4000/contact1/' + this.props.match.params.id)\r\n            .then(res => this.setState({ name: res.data.name, phone: res.data.phoneNumber, email: res.data.contactEmail }))\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    UpdateContact = () => {\r\n        let modifiedContact = {\r\n            name: this.state.name,\r\n            phoneNumber: this.state.phone,\r\n            contactEmail: this.state.email\r\n        }\r\n        axios.put('http://localhost:4000/update/' + this.props.match.params.id, modifiedContact)\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <input name=\"name\" placeholder=\"name\" type=\"text\" value={this.state.name} onChange={(e) => this.handleChange(e)} /><br />\r\n                <input name=\"phone\" placeholder=\"phone\" type=\"text\" value={this.state.phone} onChange={(e) => this.handleChange(e)} /><br />\r\n                <input name=\"email\" placeholder=\"email\" type=\"text\" value={this.state.email} onChange={(e) => this.handleChange(e)} />\r\n                <span onClick={this.UpdateContact}>modifier</span>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './style.css';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport ContactsPage from './contlist'\r\nimport ContactAdd from './add-contact';\r\nimport contactUpd from './modifyContact'\r\nclass App extends Component {\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n\r\n            <Router>\r\n                <div className=\"listcontainer\">\r\n                    <h1>Contact App</h1>\r\n                    <Link to={\"/list\"}> <button>Contact List</button></Link>\r\n                    <Link to={\"/add_contact\"}><button>Add Contact</button></Link>\r\n\r\n\r\n                </div>\r\n\r\n\r\n                <Route path=\"/list\" component={ContactsPage} />\r\n\r\n                <Route path=\"/add_contact\" component={ContactAdd} />\r\n                <Route path='/update/:id' component={contactUpd} />\r\n            </Router>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}